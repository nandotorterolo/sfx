package ucu;
import java.util.HashMap;
import java.util.ArrayList;

parser code{:
    public HashMap<String, SFXFactory> rConstructors = new HashMap<String, SFXFactory>();
     public ArrayList<Object> Builder(Object name, ArrayList fijos, ArrayList variables) {
        ArrayList<ArrayList> variables1 = variables;
    	SFXFactory cClass = rConstructors.get(name.toString());
    	ArrayList<Object> objetosResultado = new ArrayList<Object>();
    	for (ArrayList param: variables1){
    	    ArrayList<Object> arrayFinal = fijos;
    		arrayFinal.addAll(variables1);
    		objetosResultado.add(cClass.Build(param));
    	}
    	return objetosResultado;
    }
:}
				

/* Terminals (tokens returned by the scanner). */
terminal String STRING, NULL;
terminal Boolean FALSE, TRUE;
terminal Long HEXLONG, LONG;
terminal Integer HEXINTEGER, INTEGER;
terminal Float FLOAT;
terminal Double DOUBLE;

terminal COLON;
terminal LCLASP;
terminal RCLASP;
terminal LBRACKET;
terminal RBRACKET;
terminal LPARENTHESIS;
terminal RPARENTHESIS;
terminal ID;
terminal PIPE;
terminal TP;


/* Non-terminals */
non terminal Object Constructor, ExpMap;
non terminal ArrayList List, ExpList, ListPipe, ListAbrev;
non terminal HashMap Map;
non terminal Value;
non terminal Start;
non terminal ArrayList MapAbrev;

/* The grammar */
Start ::= 	Value: value
			{:RESULT = value;:}
			|
			Constructor: obj
			{:RESULT = obj;:}
			;
Value ::= 	INTEGER:INTEGER
				{:RESULT = INTEGER;:}
		|
			LONG:LONG
				{:RESULT = LONG;:}
		|
			DOUBLE:DOUBLE
				{:RESULT = DOUBLE;:}
		|
			FLOAT:FLOAT
				{:RESULT = FLOAT;:}
		|
			HEXINTEGER:hint
				{:RESULT = hint;:}
		|
			HEXLONG:hlong
				{:RESULT= hlong;:}
		|
			STRING:string
				{:RESULT = string;:}
		|
			TRUE:TRUE
				{:RESULT = TRUE;:}
		|
			FALSE:FALSE
				{:RESULT = FALSE;:}
		|
			NULL:nulo
				{:RESULT = nulo;:}
		|
			ExpList:expl
			{:RESULT = expl;:}
		|
			ExpMap:expm
			{:RESULT = expm;:}
		;

Constructor ::= ID:name LPARENTHESIS List:param RPARENTHESIS
				{:
					SFXFactory cClass = parser.rConstructors.get(name);
					RESULT = cClass.Build(param);
				:}
				|
				ID:name ExpList:el
				{:
				    RESULT = Builder(name, new ArrayList<Object>(), el);
				:}
				|
				ID:name LPARENTHESIS List:param TP RPARENTHESIS	ExpList:el
					{:
				RESULT = Builder(name, param, el);
				:}
				;
ExpList ::=
			LBRACKET List:l RBRACKET
			{:
			    RESULT = l;
			:}
			|
			LBRACKET ListAbrev:la RBRACKET
			{:
			    RESULT = la;
			:}
			;

ListAbrev ::= List:l PIPE List:l1
			{:
				RESULT = new ArrayList();
				RESULT.add(0, l1);
				RESULT.add(0, l);
			:}
			|
			List:l PIPE ListAbrev:la
			{:
				RESULT =  la;
				RESULT.add(0,l);
			:}
			;

List ::= 	Value:v1 List:l
			{:
				RESULT = l;
				RESULT.add(0,v1);
			:}
			|
			{:
				RESULT = new ArrayList();
			:}
			;

ExpMap ::= 	LCLASP Map:map RCLASP
			{:
				RESULT = map;
			:}
			|
			LCLASP MapAbrev:mapAbrev RCLASP
            {:
				RESULT = mapAbrev;
			:}
		;

MapAbrev ::= Map:map1 PIPE Map:map2
			{:
                RESULT = new ArrayList();
                RESULT.add(map2);
                RESULT.add(map1);
			:}
			|
			Map:map PIPE MapAbrev:mapAbrev
			{:
                RESULT = mapAbrev;
                RESULT.add(map);
			:}

			;

Map ::= 	Value:v1 COLON Value:v2 Map:map
				{:
				RESULT = map;
				RESULT.put(v1,v2);
				:}
			|
			{:RESULT = new HashMap<Object,Object>();:}
			;
